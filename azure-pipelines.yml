# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- andover

# Build NodeJS Express app using Azure Pipelines
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript?view=vsts
strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    mac:
      imageName: 'macos-10.13'
    windows:
      imageName: 'vs2017-win2016'

pool:
  vmImage: $(imageName)

steps:
#- script: sudo install -d -m 0777 /usr/local/miniconda/
#  displayName: Fix Conda permissions (Mac)
#  condition: eq( variables['Agent.OS'], 'Darwin')

#- script: sudo install -d -m 0777 /usr/share/miniconda/
#  displayName: Fix Conda permissions (Linux)
#  condition: eq( variables['Agent.OS'], 'Linux')

#- script: echo "HELLO"
#  displayName: Fix Conda permissions (Windows)
#  condition: eq( variables['Agent.OS'], 'Windows_NT')  

- task: CondaEnvironment@1
  displayName: 'Install Conda and packages'
  inputs:
    environmentName: 'test-env'
    packageSpecs: 'python=3 numpy=1.15.* pyside pytest pip python-dateutil requests setuptools' 
    installOptions: '-q -c conda-forge'

#- script: |
#    which python
#    conda activate test-env
#    conda install -y -c conda-forge numpy=1.15.* pyside pytest pip python-dateutil requests setuptools
#  displayName: "Install packages"

- script: which python & which pip & conda list
  displayName: "Status"

- script: |
    python setup.py -q install --user
    # NEED TO FIND OUT HOW TO SET DISPLAY SIZE
    Xvfb :99 &
    export DISPLAY=:99
    sleep 3 # give xvfb some time to start
    python -c "import PySide; print(PySide.__version__);"
    pytest -v
  displayName: "Installing code and running tests (Linux)"
  condition: eq( variables['Agent.OS'], 'Linux')

- script: |
    sudo python setup.py -q install
    sudo pytest -v
  displayName: "Installing code and running tests (macOS)"
  condition: eq( variables['Agent.OS'], 'Darwin')

- script: |
    python setup.py -q install --user
    pytest -v
  displayName: "Installing code and running tests (Windows)"
  condition: eq( variables['Agent.OS'], 'Windows_NT')

steps:
- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'testgui'
    targetPath: 'examples/data/14061619.png'
