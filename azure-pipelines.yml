# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- andover

# Build NodeJS Express app using Azure Pipelines
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript?view=vsts
strategy:
  matrix:

    linux:
      # Ubuntu 16.04
      imageName: 'ubuntu-16.04'
      screen_w: 1280
      screen_h: 1024
      screen_d: 16 
    mac:
      # macOS 10.13
      imageName: 'macos-10.13'
      screen_w: 1280
      screen_h: 1024
      screen_d: 16
    windows:
      # Windows Docker Container not Visual Studio 2017 on Windows Server 2016
      imageName: 'vs2017-win2016'
      screen_w: 1280
      screen_h: 1024
      screen_d: 16 
 
pool:
  vmImage: $(imageName)

steps:


- powershell: |
    iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/set-screenresolution.ps1')) 
    Set-ScreenResolution $(screen_w) $(screen_h)
  displayName: "Seeing if the screen resolution will get set in this Windows image"
  condition: eq( variables['Agent.OS'], 'Windows_NT')

# python ci/screen.py
# PowerShell -Command {Set-DisplayResolution -Width $(screen_w) -Height $(screen_h) -Force}
# PowerShell -Command {SetDisplayResolution -Width $(screen_w) -Height $(screen_h) -Force}
# python ci/screen.py
 

- task: CondaEnvironment@1
  displayName: 'Install Conda and packages'
  inputs:
    environmentName: 'test-env'
    packageSpecs: 'python=3 numpy=1.15.* pyside pytest pip python-dateutil requests setuptools' 
    installOptions: '-q -c conda-forge'

- script: which python & which pip & conda list
  displayName: "Dump Python Install Status"

- script: |
    python setup.py -q install --user
    python ci/screen.py
    # NEED TO FIND OUT HOW TO SET DISPLAY SIZE
    Xvfb :99 -screen 0 $(screen_w)x$(screen_h)x$(screen_d) &
    export DISPLAY=:99
    sleep 3 # give xvfb some time to start
    xdpyinfo | grep dimensions
    python ci/screen.py
    pytest -v
    mv examples/data/14061619.png examples/data/14061619_linux.png
  displayName: "Installing code and running tests (Linux)"
  condition: eq( variables['Agent.OS'], 'Linux')

- script: |
    system_profiler SPDisplaysDataType | grep Resolution
    sudo python ci/screen.py
    sudo chmod +x ci/cscreen
    ./ci/cscreen -v
    ./ci/cscreen -x $(screen_w) -y $(screen_h) -d $(screen_d) -f -s a
    sudo python ci/screen.py
    sudo python setup.py -q install
    sudo pytest -v
    sudo mv examples/data/14061619.png examples/data/14061619_mac.png
  displayName: "Installing code and running tests (macOS)"
  condition: eq( variables['Agent.OS'], 'Darwin')

- script: |
    python ci/screen.py
    # PowerShell -Command "iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/set-screenresolution.ps1'))" 
    # PowerShell -Command {Set-ScreenResolution $(screen_w) $(screen_h)}
    # PowerShell -Command {Set-DisplayResolution -Width $(screen_w) -Height $(screen_h) -Force}
    # PowerShell -Command {SetDisplayResolution -Width $(screen_w) -Height $(screen_h) -Force}
    # python ci/screen.py
    python setup.py -q install --user
    pytest -v
    move examples\\data\\14061619.png examples\\data\\14061619_win.png
  displayName: "Installing code and running tests (Windows)"
  condition: eq( variables['Agent.OS'], 'Windows_NT')

- task: CopyFiles@2
  inputs:
    contents: examples/data/14*.png
    targetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  inputs:
    artifactName: 'testgui'
    targetPath: $(Build.ArtifactStagingDirectory)
